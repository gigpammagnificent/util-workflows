on:
  workflow_call:
    inputs:
      environment:
        required: true
        type: string
      sync:
        description: 'Helmfile sync'
        required: false
        type: boolean
        default: false
env:
  GHCR_ORG: ${{ vars.GHCR_ORG }}
  GHCR_TOKEN: ${{ secrets.GHCR_TOKEN }}
  AWS_REGION: eu-west-1
jobs:
  helmfile_job:
    name: deploy to EKS
    runs-on: ubuntu-latest
    if: ${{ !contains(github.repository, 'util-orch-template') }}
    steps:
      - uses: actions/checkout@v3
        with:
          token: ${{ secrets.GHCR_TOKEN }}
      - name: is e2e enabled
        run: |
          if [ -f .skip_e2e ] || [ -f .skip-e2e ] || [ -f .skip.e2e ]; then
            echo "E2E=false" >> $GITHUB_ENV
          else
            echo "E2E=true" >> $GITHUB_ENV
          fi
      - name: announce
        run: |
          echo "environment=${{ inputs.environment }}, e2e=${{ env.E2E }}"
      - uses: extractions/setup-just@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GHCR_TOKEN }}
      - uses: open-policy-agent/setup-opa@v2
        with:
          version: 0.49
      - uses: jaxxstorm/action-install-gh-release@v1
        with:
          repo: shenwei356/rush
          tag: v0.5.0
      - run: just test
      - uses: mamezou-tech/setup-helmfile@v1.2.0
        with:
          helmfile-version: 'v0.153.1'
          install-kubectl: no
          install-helm: no
      - name: setup aws cli
        if: ${{ startsWith(inputs.environment, 'eks-') }}
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      - name: login to eks
        if: ${{ startsWith(inputs.environment, 'eks-') }}
        run: |
          if [ "${{ inputs.environment }}" == 'eks-dev' ]; then
            aws eks update-kubeconfig --name ${{ inputs.environment }}
          else
            aws eks update-kubeconfig --name $(echo '${{ inputs.environment }}' | sed 's/eks\-//g')
          fi
      - name: setup openvpn
        if: ${{ startsWith(inputs.environment, 'iv-') }}
        run: |
          sudo apt-get update
          sudo apt-get --assume-yes --no-install-recommends install openvpn
          echo "KUBE_CONFIG_DATA_KEY=${{ inputs.environment }}_KUBE_CONFIG_DATA" | sed 's/-/_/g' >> $GITHUB_ENV
      - name: start openvpn
        if: ${{ startsWith(inputs.environment, 'iv-') }}
        run: |
          echo "${{ secrets.NDVR_OVPN_USERNAME_PASSWORD }}" > secrets.txt
          echo "${{ secrets.NDVR_OVPN_CONF }}" > config.ovpn
          mkdir $HOME/.kube
          echo "${{ secrets[env.KUBE_CONFIG_DATA_KEY] }}" > $HOME/.kube/config
          sudo chmod 600 $HOME/.kube/config
          sudo echo '10.100.235.50 haproxy' | sudo tee -a /etc/hosts
          sudo openvpn --config config.ovpn --log openvpn.log --daemon
      - name: wait for openvpn
        if: ${{ startsWith(inputs.environment, 'iv-') }}
        run: |
          until ping -c1 haproxy; do sleep 2; done
      - name: disable error notifications
        run: |
          echo "DEPLOYMENT_BEGIN=$(($(date +%s%N)/1000000))" >> $GITHUB_ENV
          kubectl patch daemonset fluent-bit -n telemetry -p '{"spec": {"template": {"spec": {"nodeSelector": {"non-existing": "true"}}}}}' || true
      - name: helmfile apply
        if: ${{ inputs.sync == false }}
        run: |
          helmfile apply --concurrency 4
      - name: helmfile sync
        if: ${{ inputs.sync == true }}
        run: |
          helmfile sync --concurrency 4
      - name: health check
        run: |
          just health
      - name: create deployment annotation
        if: always()
        run: |
          kubectl run curl-pod --image=curlimages/curl --attach --restart=Never --rm -- curl --request POST http://kube-prometheus-stack-grafana.prometheus.svc.cluster.local:80/api/annotations \
          --header 'Content-Type: application/json' \
          --data-raw '{
            "time":${{ env.DEPLOYMENT_BEGIN }},
            "timeEnd":'$(($(date +%s%N)/1000000))',
            "tags":["deployment", "${{ job.status }}"],
            "text":"Deployment"
          }'
      - name: enable error notifications
        if: always()
        run: |
          kubectl patch daemonset fluent-bit -n telemetry --type json -p='[{"op": "remove", "path": "/spec/template/spec/nodeSelector/non-existing"}]' || true
      - name: start e2e tests
        uses: benc-uk/workflow-dispatch@v1
        if: ${{ env.E2E == 'true' }}
        with:
          workflow: e2e.yaml
          repo: ${{ vars.GHCR_ORG }}/endeavour-e2e
          token: ${{ secrets.GHCR_TOKEN }}
          ref: main
          inputs: '{"environment": "${{ inputs.environment }}"}'
      - name: capture asset registry
        uses: benc-uk/workflow-dispatch@v1
        with:
          workflow: Asset registry
          token: ${{ secrets.GHCR_TOKEN }}
          ref: main
      - uses: slackapi/slack-github-action@v1.23.0
        if: ${{ failure() }}
        with:
          channel-id: 'alert-orch'
          payload: |
            {
              "icon_url": "https://github.githubassets.com/images/modules/logos_page/GitHub-Mark.png",
              "username": "${{ inputs.environment }}", "unfurl_links": false, "unfurl_media": false,
              "blocks": [{
                "type": "section",
                "fields": [
                  {"type": "mrkdwn", "text": "‚ùå *Deployment failed* ‚ùå"},
                  {"type": "mrkdwn", "text": "üëÄ <${{ github.event.repository.html_url }}/actions/runs/${{ github.run_id }}|Workflow logs> üëÄ"}
                ]
              }]
            }
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
      - name: open opsgenie alert
        uses: rockem/create-opsgenie-alert-action@v1
        # if: ${{ failure() }}
        if: ${{ false }}
        with:
          api_key: ${{ secrets.OPSGENIE_API_KEY }}
          alias: orch-${{ inputs.environment }}
          message: Deployment failed
          description: |
            <a target="_blank" href="${{ github.event.repository.html_url }}/actions/runs/${{ github.run_id }}">Workflow logs</a>
          priority: P3
          tags: endeavour,github,orch,${{ inputs.environment }}
          using_eu_url: true
      - name: close opsgenie alert
        uses: rockem/close-opsgenie-alert-action@v1
        # if: ${{ success() }}
        if: ${{ false }}
        with:
          api_key: ${{ secrets.OPSGENIE_API_KEY }}
          alias: orch-${{ inputs.environment }}
          using_eu_url: true
      - name: stop openvpn
        if: ${{ always() }}
        run: |
          if [ "${{ startsWith(inputs.environment, 'iv-') }}" == 'true' ]; then
            sudo chmod 777 openvpn.log
            sudo killall openvpn
          fi
      - name: archive openvpn logs
        if: ${{ always() }}
        uses: actions/upload-artifact@v3
        with:
          name: OpenVPN logs
          path: openvpn.log
          if-no-files-found: ignore
