on:
  workflow_call:
    secrets:
      GHCR_TOKEN:
        required: true
env:
  GHCR_USER: ${{ vars.GHCR_USER }}
  GHCR_TOKEN: ${{ secrets.GHCR_TOKEN }}
  GHCR_ORG: ${{ vars.GHCR_ORG }}
  REPO_DEVOPS_BRANCH: main
  ECLINT_REPO: editorconfig-checker/editorconfig-checker
  ECLINT_VERSION: 2.7.0
jobs:
  test:
    name: run tests
    runs-on: ubuntu-latest
    if: ${{ !contains(github.repository, 'util-dotnet-template') }}
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
          token: ${{ secrets.GHCR_TOKEN }}
      - uses: wagoid/commitlint-github-action@v5
        with:
          configFile: .commitlintrc.yml
          token: ${{ secrets.GHCR_TOKEN }}
      - uses: extractions/setup-just@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GHCR_TOKEN }}
      - uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ vars.GHCR_USER }}
          password: ${{ secrets.GHCR_TOKEN }}
      - name: helm login
        run: |
          helm registry login ghcr.io -u ${{ env.GHCR_USER }} -p ${{ env.GHCR_TOKEN }}
      - uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '6.0.x'
      - id: skipTest
        run:
          echo "pass"
      #   uses: Legorooj/skip-ci@v2
      #   with:
      #     pattern: '\[skip\stest\]'
      #     token: ${{ env.GHCR_TOKEN }}
      - name: setup opa
        if: ${{ steps.skipTest.outputs.canSkip != 'true' }}
        uses: open-policy-agent/setup-opa@v2
        with:
          version: 0.49
      - uses: jaxxstorm/action-install-gh-release@v1
        if: ${{ contains(github.repository, '-opa-') && steps.skipTest.outputs.canSkip != 'true' }}
        with:
          repo: ${{ env.ECLINT_REPO }}
          tag: ${{ env.ECLINT_VERSION }}
          binaries-location: bin
          chmod: 0755
      - name: setup editorconfig-checker
        if: ${{ contains(github.repository, '-opa-') && steps.skipTest.outputs.canSkip != 'true' }}
        run: |
          ln -s /opt/hostedtoolcache/${{ env.ECLINT_REPO }}/${{ env.ECLINT_VERSION }}/linux-x64/bin/ec-linux-amd64 \
            /opt/hostedtoolcache/${{ env.ECLINT_REPO }}/${{ env.ECLINT_VERSION }}/linux-x64/bin/editorconfig-checker
      - name: test
        if: ${{ steps.skipTest.outputs.canSkip != 'true' }}
        run: just test
      - id: hasTestReport
        if: ${{ (success() || failure()) && steps.skipTest.outputs.canSkip != 'true' }}
        run: |
          if [ "$(find /tmp/test-report -name '*.trx' 2>/dev/null | wc -l)" -gt 0 ]; then
            echo "hasTrx=true" >> $GITHUB_OUTPUT
          elif [ "$(find /tmp/test-report -name '*.xml' 2>/dev/null | wc -l)" -gt 0 ]; then
            echo "hasJunit=true" >> $GITHUB_OUTPUT
          fi
      - name: test report trx
        uses: dorny/test-reporter@v1
        if: ${{ (success() || failure()) && steps.hasTestReport.outputs.hasTrx == 'true' }}
        with:
          name: test report
          path: /tmp/test-report/*.trx
          reporter: dotnet-trx
      - name: test report junit
        uses: dorny/test-reporter@v1
        if: ${{ (success() || failure()) && steps.hasTestReport.outputs.hasJunit == 'true' }}
        with:
          name: test report
          path: /tmp/test-report/*.xml
          reporter: java-junit

  k3d:
    name: deploy to k3d
    runs-on: ubuntu-latest
    if: ${{ !contains(github.repository, 'util-dotnet-template') }}
    steps:
      - uses: actions/checkout@v3
        with:
          token: ${{ secrets.GHCR_TOKEN }}
      - uses: extractions/setup-just@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GHCR_TOKEN }}
      - uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ vars.GHCR_USER }}
          password: ${{ secrets.GHCR_TOKEN }}
      - name: helm login
        run: |
          helm registry login ghcr.io -u ${{ env.GHCR_USER }} -p ${{ env.GHCR_TOKEN }}
      - uses: volesen/setup-skaffold@v1.1
        with:
          version: v1.38.0
      - uses: rinx/setup-k3d@v0.0.4
        with:
          version: v5.5.1
          skipClusterCreation: true
      - uses: mamezou-tech/setup-helmfile@v1.2.0
        with:
          helmfile-version: "v0.153.1"
          install-kubectl: no
          install-helm: no
      - uses: actions/checkout@v3
        with:
          path: ./devops
          token: ${{ secrets.GHCR_TOKEN }}
          repository: ${{ vars.GHCR_ORG }}/devops
          ref: ${{ env.REPO_DEVOPS_BRANCH }}
      - name: deploy infrastructure
        working-directory: ./devops/helmfile
        run: |
          just compose k3d
          just _up-ci
      - name: Deploy KSQLDB
        if: ${{ contains(github.repository, 'dwh') }}
        working-directory: ./devops/helmfile
        run: |
          sudo echo '127.0.0.1 apcrg.localhost' | sudo tee -a /etc/hosts
          helmfile -e k3d -f ./helmfile-minimal.yaml -l name=kubernetes-replicator sync --skip-deps

          helmfile -f helmfile.yaml -e k3d repos
          helmfile -f helmfile.yaml -e k3d -l name=ksqldb sync --skip-deps
      - name: deploy microservice
        run: just up
      - name: failure logs ksqldb
        if: ${{ failure() && contains(github.repository, 'dwh') }}
        run: |
          echo "------------------------------------------------------------------------------------------------------------------"
          kubectl get all -n kafka
          echo "------------------------------------------------------------------------------------------------------------------"
          kubectl logs -l app=cp-ksql-server -n kafka --tail=-1
          echo "------------------------------------------------------------------------------------------------------------------"
      - name: failure logs
        if: ${{ failure() }}
        run: |
          CHART=$(basename `pwd`)
          echo "------------------------------------------------------------------------------------------------------------------"
          kubectl get all -n apicurio
          echo "------------------------------------------------------------------------------------------------------------------"
          kubectl logs -l app.kubernetes.io/name=apicurio-registry -n apicurio --tail=-1
          echo "------------------------------------------------------------------------------------------------------------------"

          echo "------------------------------------------------------------------------------------------------------------------"
          kubectl get all
          echo "------------------------------------------------------------------------------------------------------------------"

          echo "------------------------------------------------------------------------------------------------------------------"
          k3d version
          docker ps
          kubectl describe po $CHART || true
          echo "------------------------------------------------------------------------------------------------------------------"

          for NS in $(kubectl get ns --no-headers -o custom-columns=:metadata.name); do
            echo "Namespace: ${NS}"
            echo "------------------------------------------------------------------------------------------------------------------"
            kubectl logs -l app.kubernetes.io/name=${CHART} -n ${NS} --tail=-1
            echo "------------------------------------------------------------------------------------------------------------------"
            echo ""
          done
